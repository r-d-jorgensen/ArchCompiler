Machine - Assembly - Description 
0000 - < - move pointer up 
0001 - > - move pointer down 
0010 - + - increment location by 1 
0011 - - - decrement location by 1 
0100 - * - add pointer value to location value 
0101 - _ - subtract pointer value to location value 
0110 - % - output (print) value at pointer 
0111 - $ - input and store value to location at pointer 
1000 - # - store location value in pointer 
1001 - @ - load pointer value to location 
1010 - | - OR pointer value and location value store in pointer value 
1011 - & - AND pointer value and location value store in pointer value 
1100 - = - == equality check between pointer and location values 
1101 - ( - if pointer value is 0 go to end of loop
1110 - ) - end of loop 
1111 - ? - go to end loop

Syntax
!this is a comment!

Editor - David
notpad++
With above language

Complier - Tao and Lu
Read from string
turn to machine code
store as string in seperate file

Execution - Adebola and Clare
read machine code
execute on registers
display every step with all register values shown

sample instruction set:
Code: +++%+
Compiler: 00100010001001100010
Execution: assuming 3 registers
0, 0, 0 start values
0010 \\ 1, 0, 0
0010 \\ 2, 0, 0
0010 \\ 3, 0, 0
3
0110 \\ 3, 0, 0
0010 \\ 4, 0, 0

Code: < #( + $ < | ? ( - $ % < ))
instrunctions:
.move pointer up
.store location value in pointer
.if pointer value is 0 go to end of loop
. increment value by 1
.input and store value to location at pointer
.move pointer up
.or pointer value and location , loop
.end loop
.loop
..store location value in pointer
..if pointervalue is 0 fo to end loop
..decrement by 1
..input and store value to location at pointer
..print
..move pointer up
